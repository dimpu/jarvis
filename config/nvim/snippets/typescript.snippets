# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


snippet dimpu
<a href="$1"${2: class="${3:link}"}>
$0
</a>
endsnippet


snippet ngx-vc "Angular ViewChild"
@ViewChild('$0', {static: false}) $0: ElementRef<HTMLElement>;
endsnippet


snippet ngx-fact "Angular Factory"

// create element
const lazy = document.createElement('ngx-lazy-load-lazy');

// create factory for the componente
const factory = this._compFact.resolveComponentFactory(LazyComponent);

// create component reference
const LazyCompRef = factory.create(this.injector, [], lazy);
// LazyCompRef.instance.title = 'wow!!!';

this.viewRef.nativeElement.appendChild(lazy);
endsnippet

snippet ngx-store "Angular Store Model"
  private model: StoreModel<Revision>;

  revision$: Observable<Revision>;

  constructor(
    public publisherService: PublisherService,
    public modelFactory: ModelFactory<Revision>
  ) {
    this.model = this.modelFactory.create(initialData);
    this.revision$ = this.model.data$;
  }
endsnippet

snippet ngx-cons "Angular constructor "
constructor(
 public _compFact: ComponentFactoryResolver,
 public injector: Injector
) {}
endsnippet




snippet m-drop "Material Cdk drop "
drop(event: CdkDragDrop<string[]>) {
    if (event.previousContainer === event.container) {
      moveItemInArray(
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );
    } else {
      transferArrayItem(
        event.previousContainer.data,
        event.container.data,
        event.previousIndex,
        event.currentIndex
      );
    }
  }

endsnippet
