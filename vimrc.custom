" ============================================================================ "
" ===                            DISPLAY SETUP                             === "
" ============================================================================ "

" ### Font and colorsheme ### "
try
  set background=dark
  colorscheme solarized
  let g:airline_theme = 'solarized'   " -- Airline color theme
catch
  colorscheme default
endtry

" Font setup
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Hack\ 11
  elseif has("gui_macvim")
    set guifont=Hack\ 11
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

" remove menu bar
set guioptions-=m

" remove toolbar
:set guioptions-=T

" ============================================================================ "
" ===                             PLUGIN SETUP                             === "
" ============================================================================ "

" ### Vim airine ### "
set laststatus=2                  " -- Show airline even when only one split is open
set noshowmode                    " -- Hide default mode indicator
let g:airline_powerline_fonts = 1 " -- Allow fancy separators
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline_section_warning = 'syntastic'
"Custom setup that removes filetype/whitespace from default vim airline bar
let g:airline#extensions#default#layout = [[ 'a', 'b', 'c' ], ['x', 'warning' ]]
" Keep list of open files in buffer at top
let g:airline#extensions#tabline#enabled = 1

" ### Syntastic ### "
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_javascript_jshint_args = '--config /Users/ctay20/code/unite-js-app/.jshintrc'

" ### Nerdtree ### "
" Only open nerdtree if no file was specified on startup
function! StartUpNerdtree()
  if 0 == argc()
    NERDTree
  end
endfunction

autocmd VimEnter * call StartUpNerdtree()

" ### JSDoc "
let g:jsdoc_default_mapping = 0

" ### Javascript Libraries ### "
let g:used_javascript_libs = 'jquery,require,underscore,chai'

" ### GitGutter ###"
" GitGutter styling to use · instead of +/-
let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" ### fzf ###"
" Use ripgrep with fzf
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" ============================================================================ "
" ===                             KEY MAPPINGS                             === "
" ============================================================================ "
" Note: This section is useful to get a quick idea of all the built-in
" shortcuts so you have a better idea of what can be done with the default
" setup

" Clear highlighted search terms while preserving history
nmap <silent> <leader>/ :nohlsearch<CR>

" === Nerdtree shorcuts === "
" Open Nerdtree
nmap <leader>n :NERDTree<CR>

" Opens current file heiarchy in Nerdtree
nmap <leader>f :NERDTreeFind<CR>

" === fzf shortcuts === "
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>

" Svn blame highlighted lines in visual mode for svn users
vmap gl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

" Remove trailing whitespace
function! <SID>StripTrailingWhitespace()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap <silent> <leader>y :call <SID>StripTrailingWhitespace()<CR>

" JSDoc custom mapping
nmap <leader>g :JsDoc<CR>

" ============================================================================ "
" ===                            MISC. OPTIONS                             === "
" ============================================================================ "

" Tabs as 2 spaces
set expandtab
set softtabstop=2
set tabstop=2
set shiftwidth=2

" Remap space to page down and - to page up
noremap <Space> <PageDown>
noremap - <PageUp>

" Allows you to save files you opened without write permissions
cmap w!! w !sudo tee %

" Highlight trailing whitespace
autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
highlight EOLWS ctermbg=red guibg=red

" Set backups
if has('persistent_undo')
  set undodir=~/.vim/tmp/undo//     " undo files
  set undofile
  set undolevels=3000
  set undoreload=10000
endif
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup
set noswapfile
